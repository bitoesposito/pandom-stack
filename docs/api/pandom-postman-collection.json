{
  "info": {
    "name": "Pandom Stack API",
    "description": "Complete API collection for Pandom Stack - Security-First Application Boilerplate",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_uuid",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "description": "Authentication and authorization endpoints",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\",\n  \"confirmPassword\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            }
          },
          "response": []
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data.access_token) {",
                  "        pm.collectionVariables.set('access_token', response.data.access_token);",
                  "        pm.collectionVariables.set('refresh_token', response.data.refresh_token);",
                  "        pm.collectionVariables.set('user_uuid', response.data.user.uuid);",
                  "        console.log('Tokens saved successfully');",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\",\n  \"rememberMe\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{refresh_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["auth", "refresh"]
            }
          },
          "response": []
        },
        {
          "name": "Get Current User",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/auth/me",
              "host": ["{{base_url}}"],
              "path": ["auth", "me"]
            }
          },
          "response": []
        },
        {
          "name": "Verify Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"verification-token\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/verify",
              "host": ["{{base_url}}"],
              "path": ["auth", "verify"]
            }
          },
          "response": []
        },
        {
          "name": "Forgot Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/forgot-password",
              "host": ["{{base_url}}"],
              "path": ["auth", "forgot-password"]
            }
          },
          "response": []
        },
        {
          "name": "Reset Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"otp\": \"123456\",\n  \"newPassword\": \"newpassword123\",\n  \"confirmPassword\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/reset-password",
              "host": ["{{base_url}}"],
              "path": ["auth", "reset-password"]
            }
          },
          "response": []
        },
        {
          "name": "Resend Verification",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/resend-verification",
              "host": ["{{base_url}}"],
              "path": ["auth", "resend-verification"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "User Management",
      "description": "User profile and account management endpoints",
      "item": [
        {
          "name": "Get User Profile",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/profile",
              "host": ["{{base_url}}"],
              "path": ["users", "profile"]
            }
          },
          "response": []
        },
        {
          "name": "Update User Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"phone\": \"+1234567890\",\n  \"dateOfBirth\": \"1990-01-01\",\n  \"address\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  },\n  \"preferences\": {\n    \"language\": \"en\",\n    \"timezone\": \"America/New_York\",\n    \"notifications\": {\n      \"email\": true,\n      \"sms\": false,\n      \"push\": true\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/profile",
              "host": ["{{base_url}}"],
              "path": ["users", "profile"]
            }
          },
          "response": []
        },
        {
          "name": "Change Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"oldpassword123\",\n  \"newPassword\": \"newpassword123\",\n  \"confirmPassword\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/change-password",
              "host": ["{{base_url}}"],
              "path": ["users", "change-password"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Security",
      "description": "Security monitoring and GDPR compliance endpoints",
      "item": [
        {
          "name": "Get Security Logs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/security/logs?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["security", "logs"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Security Logs with Filters",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/security/logs?page=1&limit=10&type=USER_LOGIN&startDate=2024-01-01T00:00:00.000Z&endDate=2024-01-31T23:59:59.999Z",
              "host": ["{{base_url}}"],
              "path": ["security", "logs"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "type",
                  "value": "USER_LOGIN"
                },
                {
                  "key": "startDate",
                  "value": "2024-01-01T00:00:00.000Z"
                },
                {
                  "key": "endDate",
                  "value": "2024-01-31T23:59:59.999Z"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Active Sessions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/security/sessions",
              "host": ["{{base_url}}"],
              "path": ["security", "sessions"]
            }
          },
          "response": []
        },
        {
          "name": "Terminate Session",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/security/sessions/session-uuid",
              "host": ["{{base_url}}"],
              "path": ["security", "sessions", "session-uuid"]
            }
          },
          "response": []
        },
        {
          "name": "Terminate All Sessions",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/security/sessions/all",
              "host": ["{{base_url}}"],
              "path": ["security", "sessions", "all"]
            }
          },
          "response": []
        },
        {
          "name": "Request Data Export",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/security/download-data",
              "host": ["{{base_url}}"],
              "path": ["security", "download-data"]
            }
          },
          "response": []
        },
        {
          "name": "Download User Data",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/security/downloads/user-data-user-uuid-timestamp.json",
              "host": ["{{base_url}}"],
              "path": ["security", "downloads", "user-data-user-uuid-timestamp.json"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Account",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"confirmation\": \"DELETE_MY_ACCOUNT\",\n  \"reason\": \"No longer need the service\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/security/delete-account",
              "host": ["{{base_url}}"],
              "path": ["security", "delete-account"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Admin",
      "description": "Administrative endpoints (admin role required)",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/admin/users?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["admin", "users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Users with Filters",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/admin/users?page=1&limit=10&search=john&role=user&status=active&sort=createdAt&order=desc",
              "host": ["{{base_url}}"],
              "path": ["admin", "users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "search",
                  "value": "john"
                },
                {
                  "key": "role",
                  "value": "user"
                },
                {
                  "key": "status",
                  "value": "active"
                },
                {
                  "key": "sort",
                  "value": "createdAt"
                },
                {
                  "key": "order",
                  "value": "desc"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get User Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/admin/users/{{user_uuid}}",
              "host": ["{{base_url}}"],
              "path": ["admin", "users", "{{user_uuid}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update User Role",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"role\": \"moderator\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/admin/users/{{user_uuid}}/role",
              "host": ["{{base_url}}"],
              "path": ["admin", "users", "{{user_uuid}}", "role"]
            }
          },
          "response": []
        },
        {
          "name": "Update User Status",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"suspended\",\n  \"reason\": \"Violation of terms of service\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/admin/users/{{user_uuid}}/status",
              "host": ["{{base_url}}"],
              "path": ["admin", "users", "{{user_uuid}}", "status"]
            }
          },
          "response": []
        },
        {
          "name": "Get System Metrics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/admin/metrics?period=month",
              "host": ["{{base_url}}"],
              "path": ["admin", "metrics"],
              "query": [
                {
                  "key": "period",
                  "value": "month"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get System Metrics with Date Range",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/admin/metrics?startDate=2024-01-01T00:00:00.000Z&endDate=2024-01-31T23:59:59.999Z",
              "host": ["{{base_url}}"],
              "path": ["admin", "metrics"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2024-01-01T00:00:00.000Z"
                },
                {
                  "key": "endDate",
                  "value": "2024-01-31T23:59:59.999Z"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "System",
      "description": "System health and monitoring endpoints",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            }
          },
          "response": []
        },
        {
          "name": "System Metrics (Prometheus)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/metrics",
              "host": ["{{base_url}}"],
              "path": ["metrics"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Offline",
      "description": "Offline functionality and synchronization endpoints",
      "item": [
        {
          "name": "Get Sync Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/offline/sync-status",
              "host": ["{{base_url}}"],
              "path": ["offline", "sync-status"]
            }
          },
          "response": []
        },
        {
          "name": "Force Sync",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/offline/sync",
              "host": ["{{base_url}}"],
              "path": ["offline", "sync"]
            }
          },
          "response": []
        },
        {
          "name": "Get Sync Progress",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/offline/sync/sync-uuid",
              "host": ["{{base_url}}"],
              "path": ["offline", "sync", "sync-uuid"]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-refresh token if expired",
          "const token = pm.collectionVariables.get('access_token');",
          "if (token) {",
          "    try {",
          "        const payload = JSON.parse(atob(token.split('.')[1]));",
          "        const now = Math.floor(Date.now() / 1000);",
          "        if (payload.exp < now) {",
          "            console.log('Token expired, attempting refresh...');",
          "            // Could implement auto-refresh here",
          "        }",
          "    } catch (e) {",
          "        console.log('Invalid token format');",
          "    }",
          "}"
        ]
      }
    }
  ]
} 